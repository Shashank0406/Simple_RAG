# -*- coding: utf-8 -*-
"""SimpleRAG.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_AeoufxVhlUzJVcYovSBmDg4Xi4ZEDQa
"""

!nvidia-smi

!pip install pypdf

!pip install -q transformers einops accelerate bitsandbytes langchain

!pip install llama-index==0.9.39

from llama_index import VectorStoreIndex, SimpleDirectoryReader, ServiceContext
from llama_index.llms import HuggingFaceLLM
from llama_index.prompts.prompts import SimpleInputPrompt

!mkdir Data

docu = SimpleDirectoryReader('/content/Data').load_data()

docu

system_promt = """
You are a helping answer my interview questions.
Your goal is to answer questions as lively as possible based on the instructions and context provided.
"""

query_wrapper_prompt = SimpleInputPrompt("<|User|>{query_str}<|Assistant|>")

!huggingface-cli login

# Loading Mistral model

import torch

llm = HuggingFaceLLM(
    context_window=4096,
    max_new_tokens=256,
    generate_kwargs= {"temperature":0.0, "do_sample":False},
    system_prompt= system_promt,
    query_wrapper_prompt= query_wrapper_prompt,
    tokenizer_name="mistralai/Mistral-7B-Instruct-v0.3",
    model_name="mistralai/Mistral-7B-Instruct-v0.3",
    device_map="auto",
    model_kwargs= {"torch_dtype": torch.float16, "load_in_8bit":True} # Enable CPU offloading for 8-bit quantization
)

!pip install -U langchain-community

!pip install sentence_transformers

from langchain.embeddings.huggingface import HuggingFaceBgeEmbeddings
from llama_index import ServiceContext
from llama_index.embeddings import LangchainEmbedding

embed_model = LangchainEmbedding(
    HuggingFaceBgeEmbeddings(model_name="sentence-transformers/all-mpnet-base-v2")
)

service_context = ServiceContext.from_defaults(
    chunk_size=1024,
    llm=llm,
    embed_model=embed_model,
)

index = VectorStoreIndex.from_documents(docu, service_context=service_context)

query_engine = index.as_query_engine()

query = "Tell me about Your self"
response = query_engine.query(query)
print(response)

